<?xml version="1.0" encoding="UTF-8"?>
<launch>
	<!-- ####################################################### arguments #################################################### -->
	<!-- ==================================== rosbags -->
	<arg name="record_rosbags" default="0" />
	<arg name="record_rosbags_topics" default="/tf /base_scan /tilt_scan" />
	<arg name="play_rosbags" default="1" />
	<arg name="play_rosbags_rate" default="1.0" />
	
	
	<!-- ==================================== environment selection -->
	<arg name="use_ship_interior" default="1" />
	<arg name="use_ship_interior_with_unstable_ground" default="0" />
	<arg name="use_ship_interior_with_cluttered_environment" default="0" />
	<arg name="use_ship_interior_with_cluttered_environment_dynamic" default="0" />


	<!-- ==================================== localization system selection -->
	<!-- dynamic localization system -->
	<arg name="use_dynamic_robot_localization" default="1" />
	<arg name="use_6_dof" default="1" />
	<arg name="use_point_features" default="0" />
	<arg name="configuration_files_suffix" default="_2d" unless="$(arg use_6_dof)" />
	<arg name="configuration_files_suffix" default="_3d" if="$(arg use_6_dof)" />
	<arg name="yaml_configuration_filters_filename" default="$(find dynamic_robot_localization)/yaml/configs/filters$(arg configuration_files_suffix).yaml" />
	<arg name="yaml_configuration_filename" default="$(find dynamic_robot_localization)/yaml/configs/pose_tracking/static$(arg configuration_files_suffix).yaml" if="$(arg use_ship_interior)" />
	<arg name="yaml_configuration_filename" default="$(find dynamic_robot_localization)/yaml/configs/pose_tracking/unstable_ground$(arg configuration_files_suffix).yaml" if="$(arg use_ship_interior_with_unstable_ground)" />
	<arg name="yaml_configuration_filename" default="$(find dynamic_robot_localization)/yaml/configs/pose_tracking/cluttered_environments$(arg configuration_files_suffix).yaml" if="$(arg use_ship_interior_with_cluttered_environment)" />
	<arg name="yaml_configuration_filename" default="$(find dynamic_robot_localization)/yaml/configs/pose_tracking/cluttered_environments_dynamic$(arg configuration_files_suffix).yaml" if="$(arg use_ship_interior_with_cluttered_environment_dynamic)" />
	<arg name="reference_pointcloud_filename" default="$(find dynamic_robot_localization_tests)/maps/ship_interior/tridimensional/pcd/ship_interior_25mm_n30.pcd" />
	<arg name="reference_pointcloud_preprocessed_save_filename" default="" />
	<arg name="reference_pointcloud_keypoints_filename" default="$(find dynamic_robot_localization_tests)/maps/ship_interior/tridimensional/cache/ship_interior_iss3d_keypoints_50mm.pcd" />
	<arg name="reference_pointcloud_descriptors_filename" default="$(find dynamic_robot_localization_tests)/maps/ship_interior/tridimensional/cache/ship_interior_shot_descriptors_50mm.pcd" />

	<!-- other localization systems -->
	<arg name="use_odometry" default="0" />
	<arg name="use_amcl" default="0" />
	<arg name="use_amcl_simulated" default="0" />
	<arg name="use_ekf" default="0" />


	<!-- ==================================== localization system evaluation -->
	<arg name="show_rviz" default="1" />
	<arg name="show_plots" default="1" />


	<!-- ==================================== gazebo worlds -->
	<arg name="world_name" default="ship_interior" if="$(arg use_ship_interior)" />
	<arg name="world_name" default="ship_interior_with_unstable_ground" if="$(arg use_ship_interior_with_unstable_ground)" />
	<arg name="world_name" default="ship_interior_with_cluttered_environment" if="$(arg use_ship_interior_with_cluttered_environment)" />
	<arg name="world_name" default="ship_interior_with_cluttered_environment_dynamic" if="$(arg use_ship_interior_with_cluttered_environment_dynamic)" />
	<arg name="world_rosbag_suffix" default="" unless="$(arg use_6_dof)" />
	<arg name="world_rosbag_suffix" default="_with_tilting_laser" if="$(arg use_6_dof)" />
	<arg name="world_rosbag_filename" default="$(find dynamic_robot_localization_tests)/datasets/ship_interior/$(arg world_name)$(arg world_rosbag_suffix).bag" />


	<!-- ==================================== rviz configs -->
	<arg name="rviz_config" default="-d $(find dynamic_robot_localization_tests)/rviz/dynamic_robot_localization_planar.rviz" unless="$(arg use_6_dof)" />
	<arg name="rviz_config" default="-d $(find dynamic_robot_localization_tests)/rviz/dynamic_robot_localization_tridimensional.rviz" if="$(arg use_6_dof)" />


	<!-- ==================================== 3d maps -->
	<arg name="use_dynamic_map_update" default="0" />
	<!-- <arg name="map_file" default="$(find dynamic_robot_localization_tests)/maps/ship_interior/tridimensional/octomap/ship_interior_10mm.bt" /> -->
	<arg name="octomap_file" default="$(find dynamic_robot_localization_tests)/maps/ship_interior/tridimensional/octomap/ship_interior_10mm_dynamic.ot" />


	<!-- ==================================== 2d maps -->
	<arg name="map_file" default="$(find dynamic_robot_localization_tests)/maps/ship_interior/planar/ship_interior.yaml" unless="$(arg use_dynamic_map_update)" />
	<!-- <arg name="map_file" default="$(find dynamic_robot_localization_tests)/maps/ship_interior/planar/ship_interior_10mm.yaml" unless="$(arg use_dynamic_map_update)" /> -->
	<arg name="map_file" default="$(find dynamic_robot_localization_tests)/maps/ship_interior/planar/ship_interior_dynamic_10cm_height.yaml" if="$(arg use_dynamic_map_update)" />


	<!-- ==================================== robot initial pose -->
	<arg name="robot_initial_x" default="-4.5" />
	<arg name="robot_initial_y" default="2.25" />
	<arg name="robot_initial_z" default="0.004665" />
	<arg name="robot_initial_yaw" default="-1.57079633" />


	<!-- ==================================== robot sensor configuration -->
	<arg name="use_tilt_on_front_laser" default="0" unless="$(arg use_6_dof)" />
	<arg name="use_tilt_on_front_laser" default="1" if="$(arg use_6_dof)" />
	<arg name="laser_scan_topics" default="/tilt_scan+/base_scan" />
	<arg name="laser_scan_topic_amcl" default="/tilt_scan" />
	<arg name="relay_back_laser_to_front_laser" default="0" unless="$(arg use_amcl)" />
	<arg name="relay_back_laser_to_front_laser" default="1" if="$(arg use_amcl)" />
	<arg name="number_of_scans_to_assemble_per_cloud" default="2" unless="$(arg use_6_dof)" />
	<arg name="number_of_scans_to_assemble_per_cloud" default="2" if="$(arg use_6_dof)" />
	<arg name="timeout_for_cloud_assembly" default="1.0" />


	<!-- ==================================== movement paths -->
	<arg name="move_robot_on_path" default="1" />
	<arg name="move_car_on_path" default="0" unless="$(arg use_ship_interior_with_cluttered_environment_dynamic)" />
	<arg name="move_car_on_path" default="1" if="$(arg use_ship_interior_with_cluttered_environment_dynamic)" />
	<arg name="robot_path" default="$(find dynamic_robot_localization_tests)/maps/ship_interior/path.yaml" unless="$(arg use_ship_interior_with_unstable_ground)" />
	<arg name="robot_path" default="$(find dynamic_robot_localization_tests)/maps/ship_interior/path_for_unstable_ground.yaml" if="$(arg use_ship_interior_with_unstable_ground)" />
	<!-- <arg name="system_command_after_path_finished" default="killall -SIGINT rlt_robot_localization_error_node AND killall -SIGINT drl_localization_node" /> -->
	<arg name="system_command_after_path_finished" if="$(arg record_rosbags)" default="sleep 10 AND killall -SIGINT record" />
	<arg name="system_command_after_path_finished" unless="$(arg record_rosbags)"
		default="
			rosrun dynamic_reconfigure dynparam set /dynamic_robot_localization/laserscan_to_pointcloud_assembler number_of_scans_to_assemble_per_cloud 25 AND
			rosrun dynamic_reconfigure dynparam set /dynamic_robot_localization/laserscan_to_pointcloud_assembler timeout_for_cloud_assembly 2.5 AND
			rosrun dynamic_reconfigure dynparam set /dynamic_robot_localization/laserscan_to_pointcloud_assembler laser_scan_topic $(arg laser_scan_topics) AND
			sleep 10 AND
			killall -SIGINT rlt_robot_localization_error_node AND
			killall -SIGINT drl_localization_node" />




	<!-- #################################################### gazebo simulator ################################################ -->
	<include file="$(find guardian_gazebo)/launch/guardian.launch" unless="$(arg play_rosbags)">
		<arg name="world_model" default="$(find dynamic_robot_localization_tests)/worlds/$(arg world_name).world" />
		<arg name="rviz_config" default="$(arg rviz_config)" />
		<arg name="use_tilt_on_front_laser" default="$(arg use_tilt_on_front_laser)" />
		<arg name="robot_initial_x" default="$(arg robot_initial_x)" />
		<arg name="robot_initial_y" default="$(arg robot_initial_y)" />
		<arg name="robot_initial_yaw" default="$(arg robot_initial_yaw)" />
	</include>

	<param name="/use_sim_time" type="bool" value="true" if="$(arg play_rosbags)" />

	<node pkg="dynamic_robot_localization" type="drl_pose_to_tf_publisher_node" name="drl_pose_to_tf_publisher_node_ground_truth" ns="dynamic_robot_localization" output="screen" unless="$(arg play_rosbags)">
		<param name="publish_rate" type="double" value="400.0" />
		<param name="pose_with_covariance_stamped_topic" type="str" value="" />
		<param name="odometry_topic" type="str" value="/base_pose_ground_truth" />
		<param name="map_frame_id" type="str" value="map_ground_truth" />
		<param name="odom_frame_id" type="str" value="odom" />
		<param name="base_link_frame_id" type="str" value="base_footprint" />
		<param name="invert_tf_transform" type="bool" value="true" />
		<param name="invert_tf_hierarchy" type="bool" value="true" />
		<param name="transform_pose_to_map_frame_id" type="bool" value="false" />
		<param name="initial_x" type="double" value="$(arg robot_initial_x)" />
		<param name="initial_y" type="double" value="$(arg robot_initial_y)" />
		<param name="initial_z" type="double" value="$(arg robot_initial_z)" />
		<param name="initial_yaw" type="double" value="$(arg robot_initial_yaw)" />
	</node>


	<!-- #################################################### rosbags ################################################ -->
	<node pkg="rosbag" type="record" name="rosbag_record" if="$(arg record_rosbags)" args="--bz2 -O $(arg world_rosbag_filename) $(arg record_rosbags_topics)" />
	<node pkg="rosbag" type="play" name="rosbag_play" if="$(arg play_rosbags)" args="--clock --hz=400 --rate=$(arg play_rosbags_rate) $(arg world_rosbag_filename)" />


	<!-- #################################################### robot movement ################################################ -->
	<include file="$(find robot_localization_tools)/launch/twist_publisher.launch" ns="dynamic_robot_localization" if="$(arg move_robot_on_path)" >
		<arg name="yaml_path_file" default="$(arg robot_path)" />
		<arg name="system_command_after_path_finished" default="$(arg system_command_after_path_finished)" />
	</include>


	<!-- #################################################### move simulated car ################################################ -->
	<group if="$(arg move_car_on_path)">
		<node pkg="rostopic" type="rostopic" name="move_polaris_robot" output="screen" unless="$(arg play_rosbags)"
			args="pub -1 /gazebo/set_model_state gazebo_msgs/ModelState '{ model_name: polaris_ranger_ev, pose: { position: { x: -2, y: -2 ,z: 0.00031 }, orientation: {x: 0.0, y: 0.0, z: 0.707, w: 0.707 } }, twist: { linear: {x: 0.0 , y: 0.2 ,z: 0 } , angular: { x: 0.0 , y: 0 , z: 0.0 } } , reference_frame: world }'" />
		<!-- <node pkg="rosservice" type="rosservice" name="move_polaris_robot" output="screen" args="call /gazebo/set_model_state '{model_state: { model_name: polaris_ranger_ev, pose: { position: { x: -2.00007, 
			y: -1.99982 ,z: 0.000309 }, orientation: {x: 0.0, y: 0.0, z: 0.707, w: 0.707 } }, twist: { linear: {x: 0.0 , y: 0.2 ,z: 0 } , angular: { x: 0.0 , y: 0 , z: 0.0 } } , reference_frame: world } }'"/> -->
	</group>


	<!-- #################################################### system inspection ################################################ -->
	<node name="rviz" pkg="rviz" type="rviz" args="$(arg rviz_config)" if="$(arg show_rviz)" />


	<!-- ######################################################## 2D costmap ################################################## -->
	<node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)">
		<param name="frame_id" type="str" value="map" />
	</node>


	<!-- ################################################ merge two LaserScan topics ########################################## -->
	<node pkg="topic_tools" type="relay" name="relay_base_scan_to_tilt_scan" args="/base_scan /tilt_scan" output="screen" if="$(arg relay_back_laser_to_front_laser)" />


	<!-- #################################################### localization system ############################################# -->
	<include file="$(find dynamic_robot_localization)/launch/dynamic_robot_localization_system.launch" if="$(arg use_dynamic_robot_localization)">
		<arg name="yaml_configuration_filters_filename" default="$(arg yaml_configuration_filters_filename)" />
		<arg name="yaml_configuration_filename" default="$(arg yaml_configuration_filename)" />
		<arg name="robot_initial_x" default="$(arg robot_initial_x)" />
		<arg name="robot_initial_y" default="$(arg robot_initial_y)" />
		<arg name="robot_initial_z" default="$(arg robot_initial_z)" />
		<arg name="robot_initial_yaw" default="$(arg robot_initial_yaw)" />
		<arg name="laser_scan_topics" default="$(arg laser_scan_topics)" />
		<arg name="use_dynamic_map_update" default="$(arg use_dynamic_map_update)" />
		<arg name="octomap_file" default="$(arg octomap_file)" />
		<arg name="number_of_scans_to_assemble_per_cloud" default="$(arg number_of_scans_to_assemble_per_cloud)" />
		<arg name="timeout_for_cloud_assembly" default="$(arg timeout_for_cloud_assembly)" />
		<arg name="reference_pointcloud_filename" default="$(arg reference_pointcloud_filename)" if="$(arg use_6_dof)" />
		<arg name="reference_pointcloud_preprocessed_save_filename" default="$(arg reference_pointcloud_preprocessed_save_filename)" />
		<arg name="reference_pointcloud_keypoints_filename" default="$(arg reference_pointcloud_keypoints_filename)" if="$(arg use_point_features)" />
		<arg name="reference_pointcloud_descriptors_filename" default="$(arg reference_pointcloud_descriptors_filename)" if="$(arg use_point_features)" />
	</include>



	<!-- ################################################# other localization systems ########################################## -->
	<group if="$(arg use_odometry)">
		<!-- <node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="$(arg robot_initial_x) $(arg robot_initial_y) $(arg robot_initial_z) $(arg robot_initial_yaw) 0 0 map odom 5" /> -->

		<!-- map to odom publisher -->
		<include file="$(find dynamic_robot_localization)/launch/pose_to_tf_publisher.launch">
			<arg name="initial_x" default="$(arg robot_initial_x)" />
			<arg name="initial_y" default="$(arg robot_initial_y)" />
			<arg name="initial_z" default="$(arg robot_initial_z)" />
			<arg name="initial_yaw" default="$(arg robot_initial_yaw)" />
		</include>
	</group>

	<!-- simulated localization -->
	<include file="$(find dynamic_robot_localization_tests)/launch/localization_systems/amcl_simulated.launch" if="$(arg use_amcl_simulated)" />

	<!-- amcl localization -->
	<include file="$(find dynamic_robot_localization_tests)/launch/localization_systems/amcl.launch" if="$(arg use_amcl)">
		<arg name="robot_initial_x" default="$(arg robot_initial_x)" />
		<arg name="robot_initial_y" default="$(arg robot_initial_y)" />
		<arg name="robot_initial_yaw" default="$(arg robot_initial_yaw)" />
		<arg name="laser_scan_topic" default="$(arg laser_scan_topic_amcl)" />
	</include>

	<!-- EFK Filter -->
	<include file="$(find dynamic_robot_localization_tests)/launch/localization_systems/ekf.launch" if="$(arg use_ekf)" />


	<!-- ##################################################### localization plots ############################################## -->
	<include file="$(find dynamic_robot_localization_tests)/launch/localization_plots.launch" if="$(arg show_plots)" />


	<!-- ##################################################### navigation systems ############################################## -->
	<!-- <include file="$(find dynamic_robot_localization_tests)/launch/navigation_systems/linear_navigation.launch" /> -->
	<!-- <include file="$(find guardian_navigation)/launch/move_base.launch" /> -->
	<!-- <include file="$(find guardian_navigation)/navigation_local/move_base_local.launch" /> -->
</launch>
